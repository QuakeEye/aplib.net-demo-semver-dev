name: Test and Build Pipeline

on:
  push:
    branches:
      - main
      - dev

jobs:
  unity-test:
    name: Test with Unity Test Runner
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: ./aplib.net-demo/Library
          key: Library-${{ hashFiles('aplib.net-demo/Assets/**', 'aplib.net-demo/Packages/**', 'aplib.net-demo/ProjectSettings/**') }}
          restore-keys: |
            Library-${{ hashFiles('aplib.net-demo/Assets/**', 'aplib.net-demo/Packages/**', 'aplib.net-demo/ProjectSettings/**') }}
      - uses: game-ci/unity-test-runner@v4
        id: unity-test-step
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          projectPath: ./aplib.net-demo/
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          coverageOptions: "generateAdditionalMetrics;generateHtmlReport;generateHtmlReportHistory;generateBadgeReport"
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Coverage results
          path: ${{ steps.unity-test-step.outputs.coveragePath }}

  build:
    name: Build for ${{ matrix.targetPlatform }}, ${{ matrix.unity-version }}
    needs: [sonar, unity-test]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        unity-version:
          - 2022.3.19f1
        targetPlatform:
          - StandaloneOSX
          - StandaloneWindows64
          - StandaloneLinux64
          - WebGL
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          lfs: true
      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: ./aplib.net-demo/Library
          key: Library-${{ hashFiles('aplib.net-demo/Assets/**', 'aplib.net-demo/Packages/**', 'aplib.net-demo/ProjectSettings/**') }}
          restore-keys: |
            Library-${{ hashFiles('aplib.net-demo/Assets/**', 'aplib.net-demo/Packages/**', 'aplib.net-demo/ProjectSettings/**') }}
      - name: Build for ${{ matrix.targetPlatform }}, ${{ matrix.unity-version }}
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}
          unityVersion: ${{ matrix.unity-version }}
          projectPath: aplib.net-demo
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.targetPlatform }}-${{ matrix.unity-version }}
          path: build

  semantic-release:
    name: Create and publish a release for ${{ matrix.targetPlatform }}, ${{ matrix.unity-version }}
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write           # To be able to publish a GitHub Release
      # issues: write             # To be able to comment on related issues
      # pull-requests: write      # To be able to comment on released pull requests
      # id-token: write           # To enable use of OIDC for npm provenance
    strategy:
      matrix:
        unity-version:
          - 2022.3.19f1
        targetPlatform:
          - StandaloneOSX
          - StandaloneWindows64
          - StandaloneLinux64
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
      - name: Install Semantic Release
        run: npm install semantic-release@23
      - name: Install Semantic Release Dependencies
        run: npm install @semantic-release/exec@6 @semantic-release/commit-analyzer@11 @semantic-release/release-notes-generator@12
      - name: Create and Publish Release
        run: npx semantic-release@23 --dry-run false