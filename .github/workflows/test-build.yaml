name: Test and Build Pipeline

on:
  push:
    branches:
      - main
      - dev
jobs:
  unity-test:
    name: Test with Unity Test Runner
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: ./aplib.net-demo/Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-
      - uses: game-ci/unity-test-runner@v4
        id: unity-test-step
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          projectPath: ./aplib.net-demo/
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          coverageOptions: "generateAdditionalMetrics;generateHtmlReport;generateHtmlReportHistory;generateBadgeReport"
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Coverage results
          path: ${{ steps.unity-test-step.outputs.coveragePath }}

  sonar:
    name: Test and Analyze with SonarCloud
    needs: unity-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cache Unity Editor
        id: cache-unity-editor
        uses: actions/cache/restore@v4
        with:
          path: Unity/Hub/Editor
          key: Unity-Editor-2022.3.19f1
      - name: Install Unity Editor
        run: |
          chmod +x ./scripts/install-unity.sh
          ./scripts/install-unity.sh
        if: steps.cache-unity-editor.outputs.cache-hit != 'true'
      - uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          shell: bash
        run: |
          dotnet tool update dotnet-sonarscanner
          dotnet sonarscanner begin /k:"team-zomsa_aplib.net-demo" /o:"team-zomsa" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="CodeCoverage/aplib.net-demo-opencov/EditMode/TestCoverageResults_0000.xml,CodeCoverage/aplib.net-demo-opencov/PlayMode/TestCoverageResults_0000.xml"
          dotnet build scripts\Analysis.csproj
          dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  build:
    name: Build for ${{ matrix.targetPlatform }}, ${{ matrix.unity-version }}
    needs: [sonar, unity-test]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        unity-version:
          - 2022.3.19f1
        targetPlatform:
          - StandaloneOSX
          - StandaloneWindows64
          - StandaloneLinux64
          - WebGL
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          lfs: true
      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: ./aplib.net-demo/Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-
      - name: Build for ${{ matrix.targetPlatform }}, ${{ matrix.unity-version }}
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}
          unityVersion: ${{ matrix.unity-version }}
          projectPath: aplib.net-demo
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.targetPlatform }}-${{ matrix.unity-version }}
          path: build